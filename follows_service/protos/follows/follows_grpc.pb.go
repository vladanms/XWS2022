// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: protos/follows.proto

package follows

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FollowsClient is the client API for Follows service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowsClient interface {
	AddFollowToDB(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*EmptyResponse, error)
	AddFollowRequestToDB(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetFollowRequests(ctx context.Context, in *GetFollowRRequest, opts ...grpc.CallOption) (*FollowRequests, error)
	DeleteFollowRequest(ctx context.Context, in *DeleteFollowRRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	GetFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error)
	GetFollowRequest(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowRequest, error)
}

type followsClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowsClient(cc grpc.ClientConnInterface) FollowsClient {
	return &followsClient{cc}
}

func (c *followsClient) AddFollowToDB(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Follows/AddFollowToDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followsClient) AddFollowRequestToDB(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Follows/AddFollowRequestToDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followsClient) GetFollowRequests(ctx context.Context, in *GetFollowRRequest, opts ...grpc.CallOption) (*FollowRequests, error) {
	out := new(FollowRequests)
	err := c.cc.Invoke(ctx, "/Follows/GetFollowRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followsClient) DeleteFollowRequest(ctx context.Context, in *DeleteFollowRRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/Follows/DeleteFollowRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followsClient) GetFollow(ctx context.Context, in *Follow, opts ...grpc.CallOption) (*Follow, error) {
	out := new(Follow)
	err := c.cc.Invoke(ctx, "/Follows/GetFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *followsClient) GetFollowRequest(ctx context.Context, in *FollowRequest, opts ...grpc.CallOption) (*FollowRequest, error) {
	out := new(FollowRequest)
	err := c.cc.Invoke(ctx, "/Follows/GetFollowRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowsServer is the server API for Follows service.
// All implementations must embed UnimplementedFollowsServer
// for forward compatibility
type FollowsServer interface {
	AddFollowToDB(context.Context, *Follow) (*EmptyResponse, error)
	AddFollowRequestToDB(context.Context, *FollowRequest) (*EmptyResponse, error)
	GetFollowRequests(context.Context, *GetFollowRRequest) (*FollowRequests, error)
	DeleteFollowRequest(context.Context, *DeleteFollowRRequest) (*EmptyResponse, error)
	GetFollow(context.Context, *Follow) (*Follow, error)
	GetFollowRequest(context.Context, *FollowRequest) (*FollowRequest, error)
	mustEmbedUnimplementedFollowsServer()
}

// UnimplementedFollowsServer must be embedded to have forward compatible implementations.
type UnimplementedFollowsServer struct {
}

func (UnimplementedFollowsServer) AddFollowToDB(context.Context, *Follow) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollowToDB not implemented")
}
func (UnimplementedFollowsServer) AddFollowRequestToDB(context.Context, *FollowRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollowRequestToDB not implemented")
}
func (UnimplementedFollowsServer) GetFollowRequests(context.Context, *GetFollowRRequest) (*FollowRequests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowRequests not implemented")
}
func (UnimplementedFollowsServer) DeleteFollowRequest(context.Context, *DeleteFollowRRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFollowRequest not implemented")
}
func (UnimplementedFollowsServer) GetFollow(context.Context, *Follow) (*Follow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollow not implemented")
}
func (UnimplementedFollowsServer) GetFollowRequest(context.Context, *FollowRequest) (*FollowRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowRequest not implemented")
}
func (UnimplementedFollowsServer) mustEmbedUnimplementedFollowsServer() {}

// UnsafeFollowsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowsServer will
// result in compilation errors.
type UnsafeFollowsServer interface {
	mustEmbedUnimplementedFollowsServer()
}

func RegisterFollowsServer(s grpc.ServiceRegistrar, srv FollowsServer) {
	s.RegisterService(&Follows_ServiceDesc, srv)
}

func _Follows_AddFollowToDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowsServer).AddFollowToDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Follows/AddFollowToDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowsServer).AddFollowToDB(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follows_AddFollowRequestToDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowsServer).AddFollowRequestToDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Follows/AddFollowRequestToDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowsServer).AddFollowRequestToDB(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follows_GetFollowRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowsServer).GetFollowRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Follows/GetFollowRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowsServer).GetFollowRequests(ctx, req.(*GetFollowRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follows_DeleteFollowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFollowRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowsServer).DeleteFollowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Follows/DeleteFollowRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowsServer).DeleteFollowRequest(ctx, req.(*DeleteFollowRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follows_GetFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Follow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowsServer).GetFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Follows/GetFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowsServer).GetFollow(ctx, req.(*Follow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Follows_GetFollowRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowsServer).GetFollowRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Follows/GetFollowRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowsServer).GetFollowRequest(ctx, req.(*FollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Follows_ServiceDesc is the grpc.ServiceDesc for Follows service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Follows_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Follows",
	HandlerType: (*FollowsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFollowToDB",
			Handler:    _Follows_AddFollowToDB_Handler,
		},
		{
			MethodName: "AddFollowRequestToDB",
			Handler:    _Follows_AddFollowRequestToDB_Handler,
		},
		{
			MethodName: "GetFollowRequests",
			Handler:    _Follows_GetFollowRequests_Handler,
		},
		{
			MethodName: "DeleteFollowRequest",
			Handler:    _Follows_DeleteFollowRequest_Handler,
		},
		{
			MethodName: "GetFollow",
			Handler:    _Follows_GetFollow_Handler,
		},
		{
			MethodName: "GetFollowRequest",
			Handler:    _Follows_GetFollowRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/follows.proto",
}
